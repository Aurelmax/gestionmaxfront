import { getPayload as getPayloadInstance } from 'payload'
import config from '@/payload.config'

/**
 * getPayloadClient - Utilitaire pour obtenir une instance Payload CMS
 * avec gestion de cache et reconnexion propre
 *
 * Cette fonction force Payload √† se reconnecter proprement √† MongoDB
 * en cas de d√©connexion ou d'erreur d'authentification.
 */

let cachedPayload: any = null
let isConnecting = false

export async function getPayloadClient() {
  // Si d√©j√† connect√© et pas d'erreur, retourner l'instance en cache
  if (cachedPayload && !isConnecting) {
    try {
      // V√©rifier si la connexion est toujours active
      const db = cachedPayload.db
      if (db && db.connection && db.connection.readyState === 1) {
        return cachedPayload
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Connexion Payload existante invalide, reconnexion...')
      cachedPayload = null
    }
  }

  // √âviter les connexions multiples simultan√©es
  if (isConnecting) {
    // Attendre que la connexion en cours se termine
    let attempts = 0
    while (isConnecting && attempts < 50) {
      await new Promise(resolve => setTimeout(resolve, 100))
      attempts++
    }
    if (cachedPayload) {
      return cachedPayload
    }
  }

  try {
    isConnecting = true
    console.log('üîÑ Initialisation de Payload CMS...')
    console.log('üîç MongoDB URI pr√©sente:', process.env['MONGODB_URI'] ? '‚úÖ Oui' : '‚ùå Non')
    console.log('üîç MongoDB URI length:', process.env['MONGODB_URI']?.length || 0)

    // Obtenir une nouvelle instance Payload
    const payload = await getPayloadInstance({ config })

    // V√©rifier que la connexion MongoDB est active
    if (payload.db && payload.db.connection) {
      const connectionState = payload.db.connection.readyState
      const statusMap: Record<number, string> = {
        0: 'D√©connect√©',
        1: 'Connect√© ‚úÖ',
        2: 'Connexion en cours...',
        3: 'D√©connexion en cours...',
      }
      console.log('üìä √âtat de connexion MongoDB:', statusMap[connectionState] || `√âtat ${connectionState}`)

      if (connectionState !== 1) {
        console.warn('‚ö†Ô∏è MongoDB pas compl√®tement connect√©')
      }
    }

    cachedPayload = payload
    console.log('‚úÖ Payload CMS initialis√© avec succ√®s')

    return payload
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de Payload:', error)
    cachedPayload = null
    throw error
  } finally {
    isConnecting = false
  }
}

/**
 * R√©initialiser le cache Payload (utile pour les tests ou en cas de probl√®me)
 */
export function resetPayloadCache() {
  console.log('üîÑ R√©initialisation du cache Payload')
  cachedPayload = null
}

/**
 * V√©rifier l'√©tat de la connexion Payload
 */
export function checkPayloadConnection(): {
  cached: boolean
  connected: boolean
  state: number | null
} {
  if (!cachedPayload) {
    return { cached: false, connected: false, state: null }
  }

  const state = cachedPayload.db?.connection?.readyState || null
  return {
    cached: true,
    connected: state === 1,
    state,
  }
}
