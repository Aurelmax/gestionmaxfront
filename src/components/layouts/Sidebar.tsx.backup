'use client';

import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { cn } from '@/lib/utils';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import {
  LayoutDashboard,
  BookOpen,
  Users,
  Calendar,
  FileText,
  Settings,
  UserCog,
  ExternalLink,
  LogOut,
  PenTool,
  Image,
  Calendar,
} from 'lucide-react';

const navigation = [
  { name: 'Dashboard', href: '/admin', icon: LayoutDashboard },
  { name: 'Programmes', href: '/admin/programmes', icon: BookOpen },
  { name: 'Apprenants', href: '/admin/apprenants', icon: Users },
  { name: 'Rendez-vous', href: '/admin/rendez-vous', icon: Calendar },
  { name: 'Blog', href: '/admin/blog', icon: PenTool },
  { name: 'M√©dias', href: '/admin/medias', icon: Image },
  { name: 'Utilisateurs', href: '/admin/utilisateurs', icon: UserCog },
  { name: 'Documents', href: '/admin/documents', icon: FileText },
  { name: 'Param√®tres', href: '/admin/parametres', icon: Settings },
];

export function Sidebar() {
  const [isMounted, setIsMounted] = useState(false);
  const pathname = usePathname();
  const router = useRouter();
  const { user, logout } = useAuth();

  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Rendu c√¥t√© client uniquement pour √©viter les erreurs d'hydratation
  if (!isMounted) {
    return (
      <div className="w-64 bg-white border-r border-gray-200 flex flex-col">
        <div className="p-6 border-b">
          <h1 className="text-2xl font-bold text-primary">GestionMax</h1>
          <p className="text-sm text-muted-foreground">Formation Pro</p>
        </div>
        <div className="flex-1 p-4 space-y-1">
          <div className="animate-pulse space-y-2">
            {[...Array(7)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-64 bg-white border-r border-gray-200 flex flex-col">
      <div className="p-6 border-b">
        <h1 className="text-2xl font-bold text-primary">GestionMax</h1>
        <p className="text-sm text-muted-foreground">Formation Pro</p>
      </div>

      <nav className="flex-1 p-4 space-y-1">
        {navigation.map((item) => {
          const isActive = isMounted && pathname === item.href;
          const Icon = item.icon;

          return (
            <Link
              key={item.name}
              href={item.href}
              className={cn(
                'flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors',
                isActive
                  ? 'bg-primary text-primary-foreground'
                  : 'text-gray-700 hover:bg-gray-100'
              )}
            >
              <Icon className="h-5 w-5" />
              {item.name}
            </Link>
          );
        })}
        
        {/* Lien vers l'interface CMS */}
        <div className="pt-4 border-t border-gray-200">
          <Link
            href="/admin/payload"
            className="flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-100 transition-colors"
          >
            <ExternalLink className="h-5 w-5" />
            Interface CMS Payload
          </Link>
          <Link
            href="/admin/payload/real"
            className="flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-100 transition-colors"
          >
            <ExternalLink className="h-5 w-5" />
            Payload CMS R√©el
          </Link>
        </div>
      </nav>

      <div className="p-4 border-t">
        <div className="flex items-center gap-3 px-3 py-2 mb-3">
          <div className="h-8 w-8 rounded-full bg-primary flex items-center justify-center text-white font-semibold">
            {user?.firstName?.[0]}{user?.lastName?.[0] || user?.name?.[0]}
          </div>
          <div className="flex-1 min-w-0">
            <p className="text-sm font-medium truncate">{user?.name || 'Utilisateur'}</p>
            <p className="text-xs text-muted-foreground capitalize">{user?.role || 'Utilisateur'}</p>
          </div>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={() => {
            console.log('üö™ Clic sur d√©connexion');
            // Rediriger vers la page de d√©connexion d√©di√©e
            window.location.href = '/admin/logout';
          }}
          className="w-full justify-start"
        >
          <LogOut className="h-4 w-4 mr-2" />
          Se d√©connecter
        </Button>
      </div>
    </div>
  );
}
